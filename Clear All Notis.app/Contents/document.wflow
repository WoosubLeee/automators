<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>520</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>AppleScript 실행</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}		tell application "Automator" to activate		return inputend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>2DC25E73-24B8-44CA-B483-3F6E3CE90D42</string>
				<key>Keywords</key>
				<array>
					<string>실행</string>
				</array>
				<key>OutputUUID</key>
				<string>543CC8E6-4FB4-42BA-8FA4-760E5CC7839B</string>
				<key>UUID</key>
				<string>4F96FA0E-612A-4A5E-B9E0-2D568B2A5A29</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>310.000000:315.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>JavaScript 실행</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>function run(input, parameters) {  const appNames = [];  const skipAppNames = [];  const verbose = true;  const scriptName = "close_notifications_applescript";  const CLEAR_ALL_ACTION = "모두 지우기";  const CLEAR_ALL_ACTION_TOP = "Clear";  const CLOSE_ACTION = "닫기";  const notNull = (val) =&gt; {    return val !== null &amp;&amp; val !== undefined;  };  const isNull = (val) =&gt; {    return !notNull(val);  };  const notNullOrEmpty = (val) =&gt; {    return notNull(val) &amp;&amp; val.length &gt; 0;  };  const isNullOrEmpty = (val) =&gt; {    return !notNullOrEmpty(val);  };  const isError = (maybeErr) =&gt; {    return notNull(maybeErr) &amp;&amp; (maybeErr instanceof Error || maybeErr.message);  };  const systemVersion = () =&gt; {    return Application("Finder")      .version()      .split(".")      .map((val) =&gt; parseInt(val));  };  const systemVersionGreaterThanOrEqualTo = (vers) =&gt; {    return systemVersion()[0] &gt;= vers;  };  const isBigSurOrGreater = () =&gt; {    return systemVersionGreaterThanOrEqualTo(11);  };  const V11_OR_GREATER = isBigSurOrGreater();  const V12 = systemVersion()[0] === 12;  const APP_NAME_MATCHER_ROLE = V11_OR_GREATER ? "AXStaticText" : "AXImage";  const hasAppNames = notNullOrEmpty(appNames);  const hasSkipAppNames = notNullOrEmpty(skipAppNames);  const hasAppNameFilters = hasAppNames || hasSkipAppNames;  const appNameForLog = hasAppNames ? ` [${appNames.join(",")}]` : "";  const logs = [];  const log = (message, ...optionalParams) =&gt; {    let message_with_prefix = `${new Date()      .toISOString()      .replace("Z", "")      .replace("T", " ")} [${scriptName}]${appNameForLog} ${message}`;    console.log(message_with_prefix, optionalParams);    logs.push(message_with_prefix);  };  const logError = (message, ...optionalParams) =&gt; {    if (isError(message)) {      let err = message;      message = `${err}${err.stack ? " " + err.stack : ""}`;    }    log(`ERROR ${message}`, optionalParams);  };  const logErrorVerbose = (message, ...optionalParams) =&gt; {    if (verbose) {      logError(message, optionalParams);    }  };  const logVerbose = (message) =&gt; {    if (verbose) {      log(message);    }  };  const getLogLines = () =&gt; {    return logs.join("\n");  };  const getSystemEvents = () =&gt; {    let systemEvents = Application("System Events");    systemEvents.includeStandardAdditions = true;    return systemEvents;  };  const getNotificationCenter = () =&gt; {    try {      return getSystemEvents().processes.byName("NotificationCenter");    } catch (err) {      logError("Could not get NotificationCenter");      throw err;    }  };  const getNotificationCenterGroups = (retryOnError = false) =&gt; {    try {      let notificationCenter = getNotificationCenter();      if (notificationCenter.windows.length &lt;= 0) {        return [];      }      if (!V11_OR_GREATER) {        return notificationCenter.windows();      }      if (V12) {        return notificationCenter.windows[0].uiElements[0].uiElements[0].uiElements();      }      return notificationCenter.windows[0].uiElements[0].uiElements[0].uiElements[0].uiElements();    } catch (err) {      logError("Could not get NotificationCenter groups");      if (retryOnError) {        logError(err);        log("Retrying getNotificationCenterGroups...");        return getNotificationCenterGroups(false);      } else {        throw err;      }    }  };  const isClearButton = (description, name) =&gt; {    return description === "button" &amp;&amp; name === CLEAR_ALL_ACTION_TOP;  };  const matchesAnyAppNames = (value, checkValues) =&gt; {    if (isNullOrEmpty(checkValues)) {      return false;    }    let lowerAppName = value.toLowerCase();    for (let checkValue of checkValues) {      if (lowerAppName === checkValue.toLowerCase()) {        return true;      }    }    return false;  };  const matchesAppName = (role, value) =&gt; {    if (role !== APP_NAME_MATCHER_ROLE) {      return false;    }    if (hasAppNames) {      return matchesAnyAppNames(value, appNames);    }    return !matchesAnyAppNames(value, skipAppNames);  };  const notificationGroupMatches = (group) =&gt; {    try {      let description = group.description();      if (V11_OR_GREATER &amp;&amp; isClearButton(description, group.name())) {        return true;      }      if (V11_OR_GREATER &amp;&amp; description !== "그룹") {        return false;      }      if (!V11_OR_GREATER) {        let matchedAppName = !hasAppNameFilters;        if (!matchedAppName) {          for (let elem of group.uiElements()) {            if (matchesAppName(elem.role(), elem.description())) {              matchedAppName = true;              break;            }          }        }        if (matchedAppName) {          return notNull(findCloseActionV10(group, -1));        }        return false;      }      if (!hasAppNameFilters) {        return true;      }      let firstElem = group.uiElements[0];      return matchesAppName(firstElem.role(), firstElem.value());    } catch (err) {      logErrorVerbose(        `Caught error while checking window, window is probably closed: ${err}`      );      logErrorVerbose(err);    }    return false;  };  const findCloseActionV10 = (group, closedCount) =&gt; {    try {      for (let elem of group.uiElements()) {        if (elem.role() === "AXButton" &amp;&amp; elem.title() === CLOSE_ACTION) {          return elem.actions["AXPress"];        }      }    } catch (err) {      logErrorVerbose(        `(group_${closedCount}) Caught error while searching for close action, window is probably closed: ${err}`      );      logErrorVerbose(err);      return null;    }    log("No close action found for notification");    return null;  };  const findCloseAction = (group, closedCount) =&gt; {    try {      if (!V11_OR_GREATER) {        return findCloseActionV10(group, closedCount);      }      let checkForPress = isClearButton(group.description(), group.name());      let clearAllAction;      let closeAction;      for (let action of group.actions()) {        let description = action.description();        console.log(description);        if (description === CLEAR_ALL_ACTION) {          clearAllAction = action;          break;        } else if (description === CLOSE_ACTION) {          closeAction = action;        } else if (checkForPress &amp;&amp; description === "누르기") {          clearAllAction = action;          break;        }      }      if (notNull(clearAllAction)) {        return clearAllAction;      } else if (notNull(closeAction)) {        return closeAction;      }    } catch (err) {      logErrorVerbose(        `(group_${closedCount}) Caught error while searching for close action, window is probably closed: ${err}`      );      logErrorVerbose(err);      return null;    }    log("No close action found for notification");    return null;  };  const closeNextGroup = (groups, closedCount) =&gt; {    try {      for (let group of groups) {        if (notificationGroupMatches(group)) {          let closeAction = findCloseAction(group, closedCount);          if (notNull(closeAction)) {            try {              closeAction.perform();              return [true, 1];            } catch (err) {              logErrorVerbose(                `(group_${closedCount}) Caught error while performing close action, window is probably closed: ${err}`              );              logErrorVerbose(err);            }          }          return [true, 0];        }      }      return false;    } catch (err) {      logError("Could not run closeNextGroup");      throw err;    }  };  try {    let groupsCount = getNotificationCenterGroups(true).filter((group) =&gt;      notificationGroupMatches(group)    ).length;    if (groupsCount === 0) {      return;    } else if (groupsCount &gt; 0) {      logVerbose(        `Closing ${groupsCount}${appNameForLog} notification group${          groupsCount &gt; 1 ? "s" : ""        }`      );      let startTime = new Date().getTime();      let closedCount = 0;      let maybeMore = true;      let maxAttempts = 2;      let attempts = 1;      while (maybeMore &amp;&amp; new Date().getTime() - startTime &lt;= 1000 * 30) {        try {          let closeResult = closeNextGroup(            getNotificationCenterGroups(),            closedCount          );          maybeMore = closeResult[0];          if (maybeMore) {            closedCount = closedCount + closeResult[1];          }        } catch (innerErr) {          if (maybeMore &amp;&amp; closedCount === 0 &amp;&amp; attempts &lt; maxAttempts) {            log(              `Caught an error before anything closed, trying ${                maxAttempts - attempts              } more time(s).`            );            attempts++;          } else {            throw innerErr;          }        }      }    } else {      throw Error(`No${appNameForLog} notifications found...`);    }  } catch (err) {    logError(err);    logError(err.message);    getLogLines();    throw err;  }  return getLogLines();}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>DC51C6C1-C49E-47E0-83C4-1F03AA2B6132</string>
				<key>Keywords</key>
				<array>
					<string>실행</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>2DBB40D7-10E6-4DBC-8412-552687BED0CE</string>
				<key>UUID</key>
				<string>5AD0D70B-E932-4DFB-B3CC-AD1CFE181B27</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>310.000000:1187.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>AppleScript 실행</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}		tell application "Automator"		quit	end tell		return inputend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>5E417841-9A92-4EB6-A971-67966D99756C</string>
				<key>Keywords</key>
				<array>
					<string>실행</string>
				</array>
				<key>OutputUUID</key>
				<string>9D285790-7DF6-4245-93A0-498CA0474389</string>
				<key>UUID</key>
				<string>B63801C2-F2EC-441C-96C5-B77A6D2963DE</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>310.000000:1432.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>86316566-E3A2-4723-A78F-DD4D58B769C9</key>
		<dict>
			<key>from</key>
			<string>5AD0D70B-E932-4DFB-B3CC-AD1CFE181B27 - 5AD0D70B-E932-4DFB-B3CC-AD1CFE181B27</string>
			<key>to</key>
			<string>B63801C2-F2EC-441C-96C5-B77A6D2963DE - B63801C2-F2EC-441C-96C5-B77A6D2963DE</string>
		</dict>
		<key>C1CC4B92-8926-4AB4-BFC1-24567A65532C</key>
		<dict>
			<key>from</key>
			<string>4F96FA0E-612A-4A5E-B9E0-2D568B2A5A29 - 4F96FA0E-612A-4A5E-B9E0-2D568B2A5A29</string>
			<key>to</key>
			<string>5AD0D70B-E932-4DFB-B3CC-AD1CFE181B27 - 5AD0D70B-E932-4DFB-B3CC-AD1CFE181B27</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
